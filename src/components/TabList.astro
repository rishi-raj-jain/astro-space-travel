---

---

<div class="tabs">
    <div class="tab-panel-images"></div>

    <div class="line-indicators flex fs-300" role="tablist">
        <button
            class="uppercase text-accent letter-spacing-2"
            id="tab-1"
            role="tab"
            aria-selected="true"
            aria-controls="tabpanel-1"
            tabindex="0"
            data-image-src="/destination/image-moon.webp"
        >
            Moon</button
        >
        <button
            class="uppercase text-accent letter-spacing-2"
            id="tab-2"
            role="tab"
            aria-selected="false"
            aria-controls="tabpanel-2"
            tabindex="-1"
            data-image-src="/destination/image-mars.webp">Mars</button
        >
        <button
            class="uppercase text-accent letter-spacing-2"
            id="tab-3"
            role="tab"
            aria-selected="false"
            aria-controls="tabpanel-3"
            tabindex="-1"
            data-image-src="/destination/image-europa.webp">Europa</button
        >
        <button
            class="uppercase text-accent letter-spacing-2"
            id="tab-4"
            role="tab"
            aria-selected="false"
            aria-controls="tabpanel-4"
            tabindex="-1"
            data-image-src="/destination/image-titan.webp">Titan</button
        >
    </div>

    <div id="tabpanel-1" role="tabpanel" aria-labelledby="tab-1" tabindex="0">
        <div class="flow">
            <h2 class="fs-fluid-800 ff-serif uppercase">Moon</h2>

            <div>
                <p class="text-accent">
                    See our planet as you’ve never seen it before. A perfect relaxing trip away to
                    help regain perspective and come back refreshed. While you’re there, take in
                    some history by visiting the Luna 2 and Apollo 11 landing sites.
                </p>
            </div>

            <div class="meta">
                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Avg. distance</p>
                    <p class="fs-500 ff-serif uppercase">384,400 km</p>
                </div>

                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Est. travel time</p>
                    <p class="fs-500 ff-serif uppercase">3 days</p>
                </div>
            </div>
        </div>
    </div>

    <div id="tabpanel-2" role="tabpanel" aria-labelledby="tab-2" tabindex="0" hidden>
        <div class="flow">
            <h2 class="fs-fluid-800 ff-serif uppercase">Mars</h2>

            <div>
                <p class="text-accent">
                    Don’t forget to pack your hiking boots. You’ll need them to tackle Olympus Mons,
                    the tallest planetary mountain in our solar system. It’s two and a half times
                    the size of Everest!
                </p>
            </div>

            <div class="meta">
                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Avg. distance</p>
                    <p class="fs-500 ff-serif uppercase">225 mil. km</p>
                </div>

                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Est. travel time</p>
                    <p class="fs-500 ff-serif uppercase">9 months</p>
                </div>
            </div>
        </div>
    </div>

    <div id="tabpanel-3" role="tabpanel" aria-labelledby="tab-3" tabindex="0" hidden>
        <div class="flow">
            <h2 class="fs-fluid-800 ff-serif uppercase">Europa</h2>

            <div>
                <p class="text-accent">
                    The smallest of the four Galilean moons orbiting Jupiter, Europa is a winter
                    lover’s dream. With an icy surface, it’s perfect for a bit of ice skating,
                    curling, hockey, or simple relaxation in your snug wintery cabin.
                </p>
            </div>

            <div class="meta">
                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Avg. distance</p>
                    <p class="fs-500 ff-serif uppercase">628 mil. km</p>
                </div>

                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Est. travel time</p>
                    <p class="fs-500 ff-serif uppercase">3 years</p>
                </div>
            </div>
        </div>
    </div>

    <div id="tabpanel-4" role="tabpanel" aria-labelledby="tab-4" tabindex="0" hidden>
        <div class="flow">
            <h2 class="fs-fluid-800 ff-serif uppercase">Titan</h2>

            <div>
                <p class="text-accent">
                    The only moon known to have a dense atmosphere other than Earth, Titan is a home
                    away from home (just a few hundred degrees colder!). As a bonus, you get
                    striking views of the Rings of Saturn.
                </p>
            </div>

            <div class="meta">
                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Avg. distance</p>
                    <p class="fs-500 ff-serif uppercase">1.6 bil. km</p>
                </div>

                <div>
                    <p class="fs-200 ff-sans-cond letter-spacing-3 text-accent">Est. travel time</p>
                    <p class="fs-500 ff-serif uppercase">7 years</p>
                </div>
            </div>
        </div>
    </div>
</div>

<style lang="scss">
    @use 'src/scss/functions/fluid' as *;

    .tabs {
        display: grid;
        grid-template-columns: subgrid;
        gap: inherit;

        > * {
            max-inline-size: 62ch;
        }

        @media (--for-phone-only) {
            > .tab-panel-images {
                max-inline-size: 65%;
            }
        }

        @media (--until-tablet-l) {
            place-items: center;
            text-align: center;
        }

        @media (--for-tablet-l-up) {
            grid-column: fullbleed;
        }
    }

    [role='tablist'] {
        --gap: #{fluid(24px, 32px, 600px, 900px)};
    }

    .tab-panel-images {
        display: grid;
        place-items: center;
        aspect-ratio: 1;
        inline-size: 100%;

        @media (--for-tablet-l-up) {
            grid-column: col1;
            grid-row: 1 / span 2;
            align-self: center;
        }
    }

    @media (--for-tablet-l-up) {
        [role='tablist'],
        [role='tabpanel'] {
            grid-column: col2;
        }
    }
</style>

<script>
    // Define a function called TabbedContent that takes a DOM node as an argument
    export const TabbedContent = (domNode: HTMLElement): void => {
        // Find the container for the tabs
        const tabsList = domNode.querySelector<HTMLElement>('[role=tablist]')
        if (!tabsList) return // If no tablist is found, exit the function

        const hasAutoTab = domNode.hasAttribute('tabs-auto-tab')

        // Get all the tab elements and panel elements
        const tabs = Array.from(tabsList.querySelectorAll<HTMLElement>('[role=tab]'))
        const panels = Array.from(domNode.querySelectorAll<HTMLElement>('[role=tabpanel]'))

        // Create a mapping between tab elements and panel elements
        const tabPanelMap = new Map<HTMLElement, HTMLElement>()

        tabs.forEach((tab) => {
            const panelId = tab.getAttribute('aria-controls')
            if (panelId) {
                const panel = domNode.querySelector<HTMLElement>(`#${CSS.escape(panelId)}`)
                if (panel) {
                    tabPanelMap.set(tab, panel)
                }
            }
        })

        // Set the initial active tab to the one marked as selected, or the first tab
        let activeTab = tabsList.querySelector<HTMLElement>('[aria-selected=true]') || tabs[0]

        // Function to switch between tabs
        const switchTab = (newTab: HTMLElement): void => {
            const newPanel = tabPanelMap.get(newTab)
            if (!newPanel) return

            // Hide all panels and show the new one
            panels.forEach((panel) => panel.setAttribute('hidden', 'true'))
            newPanel.removeAttribute('hidden')

            // Update the selected state of tabs
            activeTab.setAttribute('aria-selected', 'false')
            activeTab.setAttribute('tabindex', '-1')

            newTab.setAttribute('aria-selected', 'true')
            newTab.setAttribute('tabindex', '0')

            // Move the indicator under the active tab
            moveIndicator(activeTab, newTab)

            // Display the linked image in a separate container
            displayLinkedImage(newTab)

            // Update the active tab
            activeTab = newTab
        }

        // delta parameter specifies the direction to move the tab (-1 for left and 1 for right).
        const moveTab = (delta: number): void => {
            const currentTab = document.activeElement as HTMLElement
            const currentIndex = tabs.indexOf(currentTab)
            const newIndex = (currentIndex + delta + tabs.length) % tabs.length

            if (hasAutoTab) {
                switchTab(tabs[newIndex])
            }

            tabs[newIndex].focus()
        }

        // Move the indicator between tabs with animation
        const moveIndicator = (oldTab: HTMLElement, newTab: HTMLElement): void => {
            // Determine the position of the newTab relative to the oldTab in the document
            const newTabPosition = oldTab.compareDocumentPosition(newTab)

            // Calculate the width of the new tab as a fraction of the tabs list width
            const newTabWidth = `${newTab.offsetWidth / tabsList.offsetWidth}`

            let transitionWidth

            // Calculate the width of the transition based on the tab positions
            if (newTabPosition === 4) {
                // If the new tab comes after the old tab, calculate the width accordingly
                transitionWidth = newTab.offsetLeft + newTab.offsetWidth - oldTab.offsetLeft
            } else {
                // If the new tab comes before the old tab, calculate the width accordingly
                transitionWidth = oldTab.offsetLeft + oldTab.offsetWidth - newTab.offsetLeft
                // Update the left property of tabsList to match the new tab's position
                tabsList.style.setProperty('--_left', `${newTab.offsetLeft}px`)
            }

            // Set the CSS custom property to control the indicator's width during transition
            tabsList.style.setProperty('--_width', `${transitionWidth / tabsList.offsetWidth}`)

            // Define a function to handle the transition end event
            const transitionEndHandler = () => {
                // Update the left and width properties of tabsList to match the new tab
                tabsList.style.setProperty('--_left', `${newTab.offsetLeft}px`)
                tabsList.style.setProperty('--_width', newTabWidth)

                // Remove the transitionEndHandler as it's no longer needed
                tabsList.removeEventListener('transitionend', transitionEndHandler)
            }

            // Attach the transitionEndHandler to the transitionend event
            // Use { once: true } to automatically remove the event listener after it's triggered
            tabsList.addEventListener('transitionend', transitionEndHandler, {
                once: true,
            })
        }

        // Function to display the linked image in a separate container
        const displayLinkedImage = (tab: HTMLElement): void => {
            const imageContainer = document.querySelector('.tab-panel-images')

            if (imageContainer && tab instanceof HTMLButtonElement) {
                const imageSrc = tab.getAttribute('data-image-src')
                if (imageSrc) {
                    // Update the content of the image container with the linked image
                    imageContainer.innerHTML = `<img src="${imageSrc}" alt="">`
                }
            }
        }

        // Listen for click events on tab elements
        tabsList.addEventListener('click', (event) => {
            const clickedTab = event.target as HTMLElement

            if (tabs.includes(clickedTab)) {
                switchTab(clickedTab)
            }
        })

        // Listen for keydown events on tablist for keyboard navigation
        tabsList.addEventListener('keydown', (event) => {
            switch (event.key) {
                case 'ArrowLeft':
                    moveTab(-1)
                    break
                case 'ArrowRight':
                    moveTab(1)
                    break
                case 'Home':
                    event.preventDefault()
                    switchTab(tabs[0])
                    break
                case 'End':
                    event.preventDefault()
                    switchTab(tabs[tabs.length - 1])
                    break
            }
        })

        // Initialize the tabbed content with the active tab
        switchTab(activeTab)
    }

    // init tabbed content
    document.addEventListener('astro:page-load', () => {
        const tabbedContent = document.querySelectorAll<HTMLElement>('.tabs')
        tabbedContent.forEach(TabbedContent)
    })
</script>
